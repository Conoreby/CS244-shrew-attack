Low-Rate TCP-Targeted Denial of Service Attacks


Introduction
Denial of Service attacks are a common attack that occurs regularly on the Internet. Typically, Denial of Service occurs when a router and/or server is flooded with so many packets that its buffers are filled up and it is forced to drop packets. While packets being dropped is used by TCP as a mechanism for congestion control, the rate of packet drops during a Denial of Service attack is often so high that few or no packets are served. Standard Denial of Service attacks involve flooding a server with packets for however long the attacker wants the service to be denied. Because these attacks require the consistent flooding of packets, it is not too difficult to build a system that filters out these attacks. However, Kuzmanovic and Knightly describe an attack that requires less throughput, but may be equally as effective on TCP flows in http://conferences.sigcomm.org/sigcomm/2003/papers/p75-kuzmanovic.pdf. This attack revolves around the back-off feature of TCP (TCP RTO). The feature is designed to reduce congestion during high traffic periods in which it is difficult to support all the inbound requests. The idea is that different flows will back off for a period of time at different times, so that another flow may flow (hopefully to completion) and leave. Because the RTO time is set (though grows), it is possible for an attacker to exploit this mechanism by flooding the system with packets just long enough to trigger RTO on all incoming flows, and then back off. Because all flows are in RTO mode, no traffic will reach the server even though the queue is empty. This problem is particularly interesting because it explores a denial of service attack that is contingent on a protocol rather than hardware constraints.

The authors found that a shrew-attack was very efficient and could reduce throughput by a magnitude. The authors then go on to explore ways of detecting and mitigating this effect. One key approach is to use randomized RTO, which reduces the effectiveness of shrew-attacks to almost NULL, since the attacker is unable to predict when the flow has started again. 
We wanted to simulate the results of the shrew-attack to see if it is as powerful as the authors claim. We think this is particularly interesting because, once again, these attacks exploit the nature of TCP rather than hardware. We begin by testing to see if we are able to constantly deny service to a flow without constantly flooding the server with packets. 
Unfortunately, we currently do not have results that match the authors. However, we believe that we have the general framework of our code completed, and only have a few bugs to fix. 
Method
We create a server that has multiple (one in the initial) switches connecting to it. We also have an attacker switch connected to it. The non-attacking threads will continue to communicate with the server until the router is saturated. Once the router is saturated, the attacker will send data at 2RTTxC (or a value higher than that) to fill up the entire buffer of the server. It will then send at RTTxC for long enough to force the other connections into RTO. It will then stop sending data. This will be repeated over multiple RTO cycles.

Difficulties
Most of our difficulties were in working with a daemon thread to create the attacker in mininet. We ended up using a UDP socket instead. 
